using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class GameManager : Singleton<GameManager>
{
    [SerializeField] private EncounterData currentEncounter;
    [SerializeField] private CombatManager combatManager;
    [SerializeField] private EncounterManager encounterManager;

    [SerializeField] private EncounterData[] encounters; //These encounters are generated by the encounter generator, when the board scene is loaded these are requested by the tile manager

    public bool enableEncounterRandomisation = true;

    private bool isPlayerVictorious = false;

    protected override void Awake()
    {
        base.Awake();
    }

    private void OnEnable()
    {
        // Subscribe when enabled
        SceneManager.sceneLoaded += OnSceneLoaded;
    }

    private void OnDisable()
    {
        // Unsubscribe when disabled
        SceneManager.sceneLoaded -= OnSceneLoaded;
    }

    void OnSceneLoaded(Scene scene, LoadSceneMode mode)
    {
        Debug.Log($"Scene loaded: {scene.name}");

        if (scene.name == "GameBoard")
        {
            AudioManager.Instance.PlayMainTheme();

            Debug.Log($"Player index is {Player.Instance.GetTileIndex()}");
            Debug.Log($"Current encounter is {currentEncounter}");
            Debug.Log("\n\n\n");

            if (currentEncounter != null)
            {
                //Grant the player the experience from completing the encounter
                Player.Instance.ExperiencePending(currentEncounter.grantedExperience);
                Player.Instance.SetRandomPowerupPending();

                Debug.Log($" Encounter at current index {encounters[Player.Instance.GetTileIndex()-1]}");

                //Set the current encounter to null
                //This is important so that the tile visual is not redrawn on the game board
                //As we want to reinforce the idea that the player has completed the encounterr
                encounters[Player.Instance.GetTileIndex()-1] = null;
            } else
            {
                Debug.Log("Current encounter is null");
            }
        }

        if (scene.name == "Combat") //Maybe not use strings like this? im not sure
        {
            InitialiseCombat();
            if (currentEncounter.isFinalBoss == true)
            {
                AudioManager.Instance.PlayFinalBossTheme();
            } 
            else
            {
                AudioManager.Instance.PlayCombatTheme();
            }
        }

        if (scene.name == "MainMenu")
        {

            AudioManager.Instance.PlayMenuTheme();
        }
    }

    void InitialiseCombat()
    {
        // Find the combat controller in the scene
        combatManager = FindObjectOfType<CombatManager>();

        if (combatManager == null)
        {
            Debug.LogError("No CombatManager found in scene!");
            return;
        }

        if (currentEncounter == null)
        {
            Debug.LogError("No EncounterData set before entering combat!");
            return;
        }

        combatManager.InitialiseCombat(currentEncounter);
    }


    public void ExitCombat()
    {
        bool playerIsAlive = Player.Instance.GetPlayerCombat().IsAlive();

        //Do any housekeeping for leaving the combat scene
        if (playerIsAlive && currentEncounter.isFinalBoss)
        {
            Debug.Log("player beat the final boss");
            currentEncounter = null;
            isPlayerVictorious = true;
            SceneLoader.Instance.LoadGameEnd();
            return;
        }

        //Player hasn't defeated the final boss, but is alive, go back to the game board
        if (playerIsAlive)
        {
            Debug.Log("player finished the combat encounter");
            SceneLoader.Instance.LoadGameScene();
            return;
        }

        Debug.Log("player died, game over");
        // If this is not set to null the player will gain exp when restarting a game
        currentEncounter = null;
        //Presumably the player is dead, we can end the game.
        SceneLoader.Instance.LoadGameEnd();
    }

    public EncounterData GetCurrentEncounter()
    {
        return currentEncounter;
    }

    public void ClearEncounters()
    {
        encounters = null;
    }

    public void SetCurrentEncounter(EncounterData data)
    {
        currentEncounter = data;
    }

    public bool GetIsVictorious()
    {
        return isPlayerVictorious;
    }

    public void SetIsVictorious(bool b)
    {
        isPlayerVictorious = b;
    }

    public EncounterData[] GetEncounters(int count)
    {
        //Encounters have not been generated yet
        if (encounters == null || encounters.Length == 0)
        {
            Debug.Log("No encounters found in the game manager, getting some for the encounter manager");
            encounters = encounterManager.GetRandomEncounters(count);
        }

        return encounters;
    }
}
